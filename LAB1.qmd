---
title: "LAB 1"
author: "Kailyn Kragas"
format:
  html:
    toc: true
    code-fold: true
    embed-resources: true
echo: true
warning: false
theme: cerulean

---

```{python}
#| output: false
#| echo: false
import pandas as pd
import numpy as np
from plotnine import *
```

## Task 1

**Identify, and list here, what aesthetics are being used and which variables are being mapped to each aesthetic.**

y = Life Expectancy

x = Income 

color = Continent

size = Population

**Import the q1data.csv dataset.**

```{python}
q1 = pd.read_csv('/Users/kkragas/Documents/GSB-544/Data/q1data.csv')
q1 = q1.dropna(subset=['four_regions'])
```

**Recreate the plot as best you can using plotnine.**

```{python}
#| output: false
region_colors = {'africa':'#54D5E9',  
                 'americas': '#7EEB03', 
                 'asia':'#F15772',  
                 'europe':'#FBE700'}
```

```{python}
labels = ["500", "1000", "2000", "4000", "8000", "16k", "32k", "64k"]

(ggplot(q1, aes(x = "income", y = "life_exp")) +
    geom_point(aes(size = "population", fill = "four_regions"), 
                color = "black", 
                stroke=0.2) +
    scale_x_log10(breaks = 500 * (2 ** np.arange(0, 8, 1)), 
                  limits = (500, 64000), 
                  labels = labels) +
    scale_y_continuous(limits = (20, 91), 
                       breaks = range(20, 91, 10)) +
    scale_fill_manual(values = region_colors, 
                      name = 'World Regions') + 
    theme_minimal() +
    scale_size_continuous(range = (1, 15)) +
    labs(y = "Life Expectancy (Years)",
         x = "Income",
         fill = "World Regions",
         size = "Population") +
    theme(figure_size = (8, 4),
          panel_grid_minor = element_blank(),
          panel_grid_major = element_line(size=0.2, color = "#e5e5e5"),
          axis_title_y = element_text(size = 8, family = "Helvetica"),
          axis_title_x = element_text(size = 8, family = "Helvetica"),
          axis_line = element_line(color = "#999999", size = 0.2)) +
    annotate("text", 
             x = 5000, 
             y = 55, 
             label = "2010", 
             size = 90, 
             alpha = 0.1, 
             family = "Helvetica") +
    annotate("text", 
             x = 28300, 
             y = 20, 
             label = "per person (GDP/capita, PPP$ inflation-adjusted)", 
             size = 4,   
             color = "#999999"))
```


**What other geometries could you use here besides geom_point? Provide an actual plot of another geometry being used here and why it’s good or bad for visualizing these data.**

```{python}

labels = ["500", "1000", "2000", "4000", "8000", "16k", "32k", "64k"]

(ggplot(q1, aes(x = "income", y = "life_exp", color='four_regions')) +
    geom_line() +
    scale_x_log10(breaks = 500 * (2 ** np.arange(0, 8, 1)), 
                  limits = (500, 64000), 
                  labels = labels) +
    scale_y_continuous(limits = (20, 91), 
                       breaks = range(20, 91, 10)) +
    scale_fill_manual(values = region_colors, 
                      name = 'World Regions') + 
    theme_minimal() +
    scale_size_continuous(range = (1, 15)) +
    labs(y = "Life Expectancy (Years)",
         x = "Income",
         color = "World Regions",
         size = "Population") +
    theme(figure_size = (8, 4),
          panel_grid_minor = element_blank(),
          panel_grid_major = element_line(size=0.2, color = "#e5e5e5"),
          axis_title_y = element_text(size = 8, family = "Helvetica"),
          axis_title_x = element_text(size = 8, family = "Helvetica"),
          axis_line = element_line(color = "#999999", size = 0.2)) +
    annotate("text", 
             x = 5000, 
             y = 55, 
             label = "2010", 
             size = 90, 
             alpha = 0.1, 
             family = "Helvetica") +
    annotate("text", 
             x = 28300, 
             y = 20, 
             label = "per person (GDP/capita, PPP$ inflation-adjusted)", 
             size = 4,   
             color = "#999999"))
```

Since both variables are numeric, a line plot (with separate lines by continent) is possible. However, connecting countries implies a continuous ordering that doesn’t exist, which can be misleading. It’s also harder to read and offers limited ways to encode additional numeric information. In contrast, a scatter/bubble plot shows the actual country-level observations without imposing continuity, and it lets us encode region with color and population with size, making it the more appropriate choice here.

## Task 2

**Identify, and list here, what aesthetics are being used and which variables are being mapped to each aesthetic.**

y = Imports

x = Exports 

color = Continent

size = Energy use

**Import the q2data.csv dataset.**

```{python}
q2 = pd.read_csv('/Users/kkragas/Documents/GSB-544/Data/q2data.csv')
```

**Recreate the plot as best you can using plotnine.**

```{python}
#| output: false
q2.isna().sum()
```

```{python}
#| output: false
def parse_energy(x):
    if pd.isna(x) or str(x).strip() == ".":
        return np.nan
    s = str(x).strip().lower()
    if s.endswith("k"):
        return float(s[:-1]) * 1000
    try:
        return float(s)
    except ValueError:
        return np.nan

q2["energy_num"] = q2["energy"].apply(parse_energy)
```

```{python}
#| output: false
q2.loc[q2["country"] == "Aruba", "four_regions"] = "americas"
q2.loc[q2["country"] == "Eswatini", "four_regions"] = "africa"
q2.loc[q2["country"] == "Faeroe Islands", "four_regions"] = "europe"
q2.loc[q2["country"] == "French Polynesia", "four_regions"] = "asia"
q2.loc[q2["country"] == "Macao, China", "four_regions"] = "asia"
q2.loc[q2["country"] == "North Macedonia", "four_regions"] = "europe"
q2.loc[q2["country"] == "Puerto Rico", "four_regions"] = "americas"
q2.loc[q2["country"] == "New Caledonia", "four_regions"] = "asia"
```

```{python}
#| output: false
q2 = q2.sort_values("energy_num", ascending=False)
```

```{python}
(ggplot(q2, aes(x = "exports", y = "imports")) +
    geom_point(aes(size = "energy_num", fill = "four_regions"), 
                color = "black", 
                stroke=0.2) +
    scale_fill_manual(values = region_colors, 
                      name = 'World Regions') +
    scale_x_continuous(limits = (0, 221), 
                       breaks = range(0, 221, 20),
                       labels=lambda xs: ['' if x == 0 else str(int(x)) for x in xs]) +
    scale_y_continuous(limits = (0, 401), 
                       breaks = range(0, 401, 50)) +
    theme_minimal() +
    scale_size_continuous(range = (1, 15)) +
    labs(y = "Imports (\% of GDP)",
         x = "Exports (\% of GDP)",
         fill = "World Regions",
         size = "Energy Use") +
    theme(figure_size = (8, 4),
          panel_grid_minor = element_blank(),
          panel_grid_major = element_line(size=0.2, color = "#e5e5e5"),
          axis_title_y = element_text(size = 8, family = "Helvetica"),
          axis_title_x = element_text(size = 8, family = "Helvetica"),
          axis_line = element_line(color = "#999999", size = 0.2)) +
    annotate("text", 
             x = 120, 
             y = 250, 
             label = "1997", 
             size = 90, 
             alpha = 0.1, 
             family = "Helvetica"))
```

**What other geometries could you use here besides geom_point? Provide an actual plot of another geometry being used here and why it’s good or bad for visualizing these data.**

Since both variables are numeric, a line plot (with separate lines by continent) is possible. However, connecting countries implies a continuous ordering that doesn’t exist, which can be misleading. It’s also harder to read and offers limited ways to encode additional numeric information. In contrast, a scatter/bubble plot shows the actual country-level observations without imposing continuity, and it lets us encode region with color and energy-use with size, making it the more appropriate choice here.

```{python}
(ggplot(q2, aes(x = "exports", y = "imports", color='four_regions')) +
    geom_line() +
    scale_fill_manual(values = region_colors, 
                      name = 'World Regions') +
    scale_x_continuous(limits = (0, 221), 
                       breaks = range(0, 221, 20),
                       labels=lambda xs: ['' if x == 0 else str(int(x)) for x in xs]) +
    scale_y_continuous(limits = (0, 401), 
                       breaks = range(0, 401, 50)) +
    theme_minimal() +
    scale_size_continuous(range = (1, 15)) +
    labs(y = "Imports (\% of GDP)",
         x = "Exports (\% of GDP)",
         color = "World Regions") +
    theme(figure_size = (8, 4),
          panel_grid_minor = element_blank(),
          panel_grid_major = element_line(size=0.2, color = "#e5e5e5"),
          axis_title_y = element_text(size = 8, family = "Helvetica"),
          axis_title_x = element_text(size = 8, family = "Helvetica"),
          axis_line = element_line(color = "#999999", size = 0.2)) +
    annotate("text", 
             x = 120, 
             y = 250, 
             label = "1997", 
             size = 90, 
             alpha = 0.1, 
             family = "Helvetica"))
```


## Task 3

**Identify, and list here, what aesthetics are being used and which variables are being mapped to each aesthetic.**

y = GDP/Capita

x = Internet users 

color = Continent

size =  Income

**Import the q3data.csv dataset.**

```{python}
q3 = pd.read_csv('/Users/kkragas/Documents/GSB-544/Data/q3data.csv')
```

```{python}
#| output: false
#| echo: false
q3
```

**Recreate the plot as best you can using plotnine.**

```{python}
#| output: false
q3.isna().sum()
```

```{python}

breaks = [200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000]
labels = ["200", "500", "1000", "2000", "5000", "10k", "20k", "50k", "100k"]

(ggplot(q3, aes(x = "internet_users", y = "gdp")) +
    geom_point(aes(size = "income", fill = "four_regions"), 
                color = "black", 
                stroke=0.2) +
    scale_fill_manual(values = region_colors, 
                      name = 'World Regions') +
    scale_x_continuous(limits = (0, 91), 
                       breaks = range(0, 91, 10),
                       labels=lambda xs: ['' if x == 0 else str(int(x)) for x in xs]) +
    scale_y_log10(breaks = breaks, 
                  limits = (200, 110000),
                  labels = labels) +
    theme_minimal() +
    scale_size_continuous(range = (1, 15)) +
    labs(y = "GDP/capita)",
         x = "Individuals using the Internet",
         fill = "World Regions",
         size = "Income") +
    theme(figure_size = (8, 4),
          panel_grid_minor = element_blank(),
          panel_grid_major = element_line(size=0.2, color = "#e5e5e5"),
          axis_title_y = element_text(size = 8, family = "Helvetica"),
          axis_title_x = element_text(size = 8, family = "Helvetica"),
          axis_line = element_line(color = "#999999", size = 0.2)) +
    annotate("text", 
             x = 50, 
             y = 5000, 
             label = "2001", 
             size = 90, 
             alpha = 0.1, 
             family = "Helvetica"))

```

**What other geometries could you use here besides geom_point? Provide an actual plot of another geometry being used here and why it’s good or bad for visualizing these data.**

Since both variables are numeric, a line plot (with separate lines by continent) is possible. However, connecting countries implies a continuous ordering that doesn’t exist, which can be misleading. It’s also harder to read and offers limited ways to encode additional numeric information. In contrast, a scatter/bubble plot shows the actual country-level observations without imposing continuity, and it lets us encode region with color and income with size, making it the more appropriate choice here.

```{python}

breaks = [200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000]
labels = ["200", "500", "1000", "2000", "5000", "10k", "20k", "50k", "100k"]

(ggplot(q3, aes(x = "internet_users", y = "gdp", color='four_regions')) +
    geom_line() +
    scale_color_manual(values = region_colors, 
                      name = 'World Regions') +
    scale_x_continuous(limits = (0, 91), 
                       breaks = range(0, 91, 10),
                       labels=lambda xs: ['' if x == 0 else str(int(x)) for x in xs]) +
    scale_y_log10(breaks = breaks, 
                  limits = (200, 110000),
                  labels = labels) +
    theme_minimal() +
    scale_size_continuous(range = (1, 15)) +
    labs(y = "GDP/capita)",
         x = "Individuals using the Internet",
         fill = "World Regions",
         size = "Income") +
    theme(figure_size = (8, 4),
          panel_grid_minor = element_blank(),
          panel_grid_major = element_line(size=0.2, color = "#e5e5e5"),
          axis_title_y = element_text(size = 8, family = "Helvetica"),
          axis_title_x = element_text(size = 8, family = "Helvetica"),
          axis_line = element_line(color = "#999999", size = 0.2)) +
    annotate("text", 
             x = 50, 
             y = 5000, 
             label = "2001", 
             size = 90, 
             alpha = 0.1, 
             family = "Helvetica"))

```